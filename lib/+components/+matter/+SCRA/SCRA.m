classdef SCRA < vsys
    
    
    %% Sabatier Carbon Dioxide Reduction Assembly (SCRA)
    %
    % The SCRA uses H2 generated by OGA and CO2 from the CDRA to create
    % water and methane. The methane is then vented over board but the
    % water can be used by the electrolyzer again to generate more oxygen.
    
    properties
        
        fCoolantTemperature;
        aoMultiSolverBranches;
    end
    
    methods
        function this = SCRA (oParent, sName, fFixedTS, fCoolantTemperature)
            this@vsys(oParent, sName, fFixedTS);
            
            this.fCoolantTemperature = fCoolantTemperature;
        end
        
        
        function createMatterStructure(this)
            createMatterStructure@vsys(this);
            
            %Temp Change allowed before CHX are recalculated
            fTempChange = 1;
            %Percental Change allowed to Massflow/Pressure/Composition of
            %Flow before CHX is recalculated
            fPercentChange = 0.025;
            
            fVolumeCRA_Sabatier = 0.1;
            matter.store(this, 'CRA_Sabatier', fVolumeCRA_Sabatier);
            
            %calculates the densities for the different substances inside
            %the CRA_Sabatier reactor (with correction factor 0.75 to get the
            %correct pressure which is necessary because it is a mixture of
            %components)
            
            tCO2.sSubstance = 'CO2';
            tCO2.sProperty = 'Density';
            tCO2.sFirstDepName = 'Pressure';
            tCO2.fFirstDepValue = 101325;
            tCO2.sSecondDepName = 'Temperature';
            tCO2.fSecondDepValue = 866.15;
            tCO2.sPhaseType = 'gas';
            fDensityCO2 = this.oMT.findProperty(tCO2);
            
            tH2O.sSubstance = 'H2O';
            tH2O.sProperty = 'Density';
            tH2O.sFirstDepName = 'Pressure';
            tH2O.fFirstDepValue = 101325;
            tH2O.sSecondDepName = 'Temperature';
            tH2O.fSecondDepValue = 866.15;
            tH2O.sPhaseType = 'gas';
            fDensityH2O = this.oMT.findProperty(tH2O);
            
            tH2.sSubstance = 'H2';
            tH2.sProperty = 'Density';
            tH2.sFirstDepName = 'Pressure';
            tH2.fFirstDepValue = 101325;
            tH2.sSecondDepName = 'Temperature';
            tH2.fSecondDepValue = 866.15;
            tH2.sPhaseType = 'gas';
            fDensityH2 = this.oMT.findProperty(tH2);
            
            tCH4.sSubstance = 'CH4';
            tCH4.sProperty = 'Density';
            tCH4.sFirstDepName = 'Pressure';
            tCH4.fFirstDepValue = 101325;
            tCH4.sSecondDepName = 'Temperature';
            tCH4.fSecondDepValue = 866.15;
            tCH4.sPhaseType = 'gas';
            fDensityCH4 = this.oMT.findProperty(tCH4);
            
            %Creates the Sabatier gas phase assuming that initially it
            %only contains the products
            oCRA_SabatierPhase = matter.phases.flow.gas(...
                this.toStores.CRA_Sabatier, 'CRA_Sabatierphase', struct(...
                'CO2', 0.01    * fVolumeCRA_Sabatier * fDensityCO2,...
                'H2' , 0.01    * fVolumeCRA_Sabatier * fDensityH2,...
                'CH4', 0.49    * fVolumeCRA_Sabatier * fDensityCH4,...
                'H2O', 0.49    * fVolumeCRA_Sabatier * fDensityH2O),...
                fVolumeCRA_Sabatier, 866.15);
            
            oHeatSource = components.thermal.heatsources.ConstantTemperature('Sabatier_Constant_Temperature');
            oCRA_SabatierPhase.oCapacity.addHeatSource(oHeatSource);
            
            components.matter.SCRA.const_press_exme(oCRA_SabatierPhase, 'CRA_Sabatier_H2in', 1e5);
            components.matter.SCRA.const_press_exme(oCRA_SabatierPhase, 'CRA_Sabatier_CO2in', 1e5);
            components.matter.SCRA.const_press_exme(oCRA_SabatierPhase, 'CRA_Sabatier_out', 1e5);
            
            %substance manipulator that changes educts to products based on
            %the chemical reaction and the current masses in the reactor.
            %Also calculates the generated heat flow from this reaction
            components.matter.SCRA.CRA_Sabatier_manip_proc('CRA_Sabatier_proc', oCRA_SabatierPhase, 0.95);
            %The second Sabatier reactor does not react anything since the
            %data that used for the model was for the overall reaction. In
            %reality the second sabatier reactor is cooled down to a lower
            %temperature to react remaining H2 and CO2 and achieve a higher
            %efficiency. The lowered temperature for the Sabatier is
            %modeled to give the CHX the correct inlet temperature.
            fVolumeCRA_Sabatier = 0.01;
            matter.store(this, 'CRA_Sabatier_2', fVolumeCRA_Sabatier);
            
            %calculates the densities for the different substances inside
            %the CRA_Sabatier reactor (with correction factor 0.75 to get the
            %correct pressure)
            tCO2.fSecondDepValue = 420.15;
            tH2O.fSecondDepValue = 420.15;
            tH2.fSecondDepValue = 420.15;
            tCH4.fSecondDepValue = 420.15;
            fDensityCO2 = this.oMT.findProperty(tCO2);
            fDensityH2O = this.oMT.findProperty(tH2O);
            fDensityH2 = this.oMT.findProperty(tH2);
            fDensityCH4 = this.oMT.findProperty(tCH4);
            
            %Creates the Sabatier gas phase assuming that initially it
            %only contains the products
            oCRA_SabatierPhase_2 = matter.phases.flow.gas(...
                this.toStores.CRA_Sabatier_2, 'CRA_Sabatierphase_2', struct(...
                'CO2', 0.01    * fVolumeCRA_Sabatier * fDensityCO2,... % currently assumed to have only products at the beginning but
                'H2' , 0.01    * fVolumeCRA_Sabatier * fDensityH2,...  % left the lines in case this is changed
                'CH4', 0.49    * fVolumeCRA_Sabatier * fDensityCH4,...
                'H2O', 0.49    * fVolumeCRA_Sabatier * fDensityH2O),...
                fVolumeCRA_Sabatier, 420.15);
            
            oHeatSource = components.thermal.heatsources.ConstantTemperature('Sabatier2_Constant_Temperature');
            oCRA_SabatierPhase_2.oCapacity.addHeatSource(oHeatSource);
            
            components.matter.SCRA.const_press_exme(oCRA_SabatierPhase_2, 'CRA_Sabatier_2_in', 1e5);
            components.matter.SCRA.const_press_exme(oCRA_SabatierPhase_2, 'CRA_Sabatier_2_out', 1e5);
            
            %The actual CHX that is used is unknown and therefore this
            %simply uses a heat exchanger with somewhat realistic values.
            %If data on the actual CHX is found this should be corrected.
            
            %Counter flow plate heat exchanger
            sHX_type = 'counter plate';
            % [fBroadness, fHeight_1, fHeight_2, fLength, fThickness]
            Geometry = [1, 0.01, 0.01, 1, 0.001];
            Conductivity = 15;
            
            iIncrements = 0;
            
            % HX Params: oParent, sName, mHX, sHX_type, fHX_TC
            % adding the heat exchanger
            oCRA_CHX = components.matter.CHX(this, 'CRA_SabatierCHX', Geometry, sHX_type, iIncrements, Conductivity, fTempChange, fPercentChange);
            %oHX = components.HX(this, 'HeatExchanger', Geometry, sHX_type, Conductivity);
            
            %CRA Water Recovery
            %Recovers the water from the sabatier production gas
            %Implemented with three filters to prevent any water loss
            
            fVolumeCRA_WaterRec = 0.01;
            %calculates the densities for the different substances
            tH2O.fSecondDepValue = 293.15;
            tH2O.sPhaseType = 'liquid';
            tH2.fSecondDepValue = 293.15;
            tCH4.fSecondDepValue = 293.15;
            fDensityH2O = this.oMT.findProperty(tH2O);
            fDensityH2 = this.oMT.findProperty(tH2);
            fDensityCH4 = this.oMT.findProperty(tCH4);
            
            matter.store(this, 'CRA_WaterRec', fVolumeCRA_WaterRec);
            
            oCRA_WaterRecLiquidPhase    = matter.phases.liquid(...
                this.toStores.CRA_WaterRec, 'RecoveredWater', struct(...
                'H2O', (1/5)*fDensityH2O*fVolumeCRA_WaterRec), 293.15, 1*10^5);
            
            fVolumeGasWaterRec = fVolumeCRA_WaterRec - oCRA_WaterRecLiquidPhase.fVolume;
            
            oCRA_WaterRecGasPhase       = matter.phases.flow.gas(...
                this.toStores.CRA_WaterRec, 'WRecgas', struct(...
                'H2' , fDensityH2  * fVolumeGasWaterRec,...
                'CH4', fDensityCH4 * fVolumeGasWaterRec),...
                fVolumeGasWaterRec, 293.15);
            
            
            oHeatSource = components.thermal.heatsources.ConstantTemperature('WaterRecovery_Constant_Temperature');
            oCRA_WaterRecLiquidPhase.oCapacity.addHeatSource(oHeatSource);
            
            components.matter.SCRA.const_press_exme(oCRA_WaterRecGasPhase, 'CRA_WaterRec_SabatierProducts_in', 1e5);
            components.matter.SCRA.const_press_exme(oCRA_WaterRecGasPhase, 'DryGasOut', 1e5);
            components.matter.SCRA.const_press_exme(oCRA_WaterRecGasPhase, 'WRUnitin1', 1e5);
            
            
            matter.procs.exmes.liquid(oCRA_WaterRecLiquidPhase, 'RecWater');
            matter.procs.exmes.liquid(oCRA_WaterRecLiquidPhase, 'WRUnitout');
            
            %adds the P2P proc for the CHX that takes care of the actual
            %phase change
            oCRA_CHX.oP2P = components.matter.HX.CHX_p2p(this.toStores.CRA_WaterRec,'CondensingHX', 'WRecgas.WRUnitin1', 'RecoveredWater.WRUnitout', oCRA_CHX);
            
            %this is only necessary because V-HAB does not allow two
            %interfaces to other systems in the same branch
            matter.store(this, 'CRA_CHXStore', 0.1);
            oCRA_CHXPhase    = matter.phases.liquid(...
                this.toStores.CRA_CHXStore, 'CHXWater', struct(...
                'H2O', fDensityH2O*(1/5)*0.1), this.fCoolantTemperature, 1*10^5);
            
            matter.procs.exmes.liquid(oCRA_CHXPhase, 'CRA_CHX_In');
            matter.procs.exmes.liquid(oCRA_CHXPhase, 'CRA_CHX_Out');
            
            % Define the standard values used for pipes
            fPipelength         = 1;
            fPipeDiameter       = 0.1;
            fFrictionFactor     = 2e-4;
            components.matter.pipe(this, 'Pipe_001', fPipelength, fPipeDiameter, fFrictionFactor);
            components.matter.pipe(this, 'Pipe_002', fPipelength, fPipeDiameter, fFrictionFactor);
            components.matter.pipe(this, 'Pipe_003', fPipelength, fPipeDiameter, fFrictionFactor);
            components.matter.pipe(this, 'Pipe_004', fPipelength, fPipeDiameter, fFrictionFactor);
            components.matter.pipe(this, 'Pipe_005', fPipelength, fPipeDiameter, fFrictionFactor);
            components.matter.pipe(this, 'Pipe_006', fPipelength, fPipeDiameter, fFrictionFactor);
            components.matter.pipe(this, 'Pipe_007', fPipelength, fPipeDiameter, fFrictionFactor);
            components.matter.pipe(this, 'Pipe_008', fPipelength, fPipeDiameter, fFrictionFactor);
            
            %Finally the flowpaths between all components
            matter.branch(this, 'CRA_Sabatier.CRA_Sabatier_H2in',       {'Pipe_001'},                             'SCRA__H2_In',                                      'CRA_H2_In');
            matter.branch(this, 'CRA_Sabatier.CRA_Sabatier_CO2in',      {'Pipe_002'},                             'SCRA__CO2_In',                                     'CRA_CO2_In');
            matter.branch(this, 'CRA_Sabatier.CRA_Sabatier_out',        {'Pipe_003'},                             'CRA_Sabatier_2.CRA_Sabatier_2_in',                 'Sabatier1to2');
            matter.branch(this, 'CRA_Sabatier_2.CRA_Sabatier_2_out',    {'Pipe_004', 'CRA_SabatierCHX_1'},        'CRA_WaterRec.CRA_WaterRec_SabatierProducts_in',    'CRA_ProductstoWaterRecbranch');
            matter.branch(this, 'CRA_WaterRec.DryGasOut',               {'Pipe_005'},                             'SCRA_DryGas_Out',                                  'CRA_DryGastoVent');
            matter.branch(this, 'CRA_WaterRec.RecWater',                {'Pipe_006'},                             'SCRA_Condensate_Out',                              'CRA_RecWaterOut');
            matter.branch(this, 'CRA_CHXStore.CRA_CHX_In',              {'Pipe_007'},                             'SCRA_CoolantIn',                                   'CRA_CoolantLoopIn');
            matter.branch(this, 'CRA_CHXStore.CRA_CHX_Out',             {'Pipe_008', 'CRA_SabatierCHX_2'},        'SCRA_CoolantOut',                                  'CRA_CoolantLoopOut');
            
            
            this.aoMultiSolverBranches = [this.toBranches.CRA_CO2_In;...
                                          this.toBranches.Sabatier1to2; ...
                                          this.toBranches.CRA_ProductstoWaterRecbranch; ...
                                          this.toBranches.CRA_DryGastoVent];
        end
        
        function createSolverStructure(this)
            createSolverStructure@vsys(this);
            
            solver.matter.residual.branch(this.toBranches.CRA_RecWaterOut);
            
            solver.matter.residual.branch(this.toBranches.CRA_H2_In);
            
            solver.matter.manual.branch(this.toBranches.CRA_CoolantLoopIn);
            solver.matter.manual.branch(this.toBranches.CRA_CoolantLoopOut);
            
            this.toBranches.CRA_CoolantLoopIn.oHandler.setFlowRate(-0.2);
            this.toBranches.CRA_CoolantLoopOut.oHandler.setFlowRate(0.2);
            
            this.setThermalSolvers();
            
            csStoreNames = fieldnames(this.toStores);
            for iStore = 1:length(csStoreNames)
                for iPhase = 1:length(this.toStores.(csStoreNames{iStore}).aoPhases)
                    oPhase = this.toStores.(csStoreNames{iStore}).aoPhases(iPhase);
                    
                    arMaxChange = zeros(1,this.oMT.iSubstances);
                    arMaxChange(this.oMT.tiN2I.Ar) = 0.75;
                    arMaxChange(this.oMT.tiN2I.O2) = 0.75;
                    arMaxChange(this.oMT.tiN2I.N2) = 0.75;
                    arMaxChange(this.oMT.tiN2I.H2) = 1;
                    arMaxChange(this.oMT.tiN2I.H2O) = 0.5;
                    arMaxChange(this.oMT.tiN2I.CO2) = 1;
                    arMaxChange(this.oMT.tiN2I.CH4) = 0.75;
                    tTimeStepProperties.arMaxChange = arMaxChange;
                    
                    oPhase.setTimeStepProperties(tTimeStepProperties);
                end
            end
            
        end
        
        
        function setIfFlows(this, sInlet1, sInlet2, sOutlet1, sOutlet2, sCoolantIn, sCoolantOut)
            %subsystem connections
            this.connectIF('SCRA__H2_In',           sInlet1);
            this.connectIF('SCRA__CO2_In',          sInlet2);
            this.connectIF('SCRA_DryGas_Out',       sOutlet1);
            this.connectIF('SCRA_Condensate_Out',   sOutlet2);
            this.connectIF('SCRA_CoolantIn',        sCoolantIn);
            this.connectIF('SCRA_CoolantOut',       sCoolantOut);
        end
    end
    
    methods (Access = protected)
        
        function exec(this, ~)
            exec@vsys(this);
            
        end
    end
end