classdef vhab
    %VHAB V-HAB Launch Class
    %   This static class provides methods to initialize the MATLAB
    %   environment and methods to construct and run V-HAB simulations.
    
    methods (Static = true)
        function init()
            %INIT A function that initializes the MATLAB environment so it
            % is ready to construct and run simulations.
            
            % Some nice output for the user.
            fprintf('+-----------------------------------------------------------------------------------+\n');
            fprintf('+------------------------------ V-HAB INITIALIZATION -------------------------------+\n');
            fprintf('+-----------------------------------------------------------------------------------+\n');
            
            % For MATLAB to find all of the files that belong to V-HAB we
            % need to add the three main folders to the MATLAB search path.
            % Note that the 'data' folder is not added, because it contains
            % files and data that are dynamically generated by V-HAB during
            % each run and not files that are used for the construction of
            % objects. 
            addpath([ strrep(pwd(), '\', '/') '/lib'  ]);
            addpath([ strrep(pwd(), '\', '/') '/core' ]);
            addpath([ strrep(pwd(), '\', '/') '/user' ]);
            
            % The old V-HAB projects are collected in one big project that
            % is located in the 'old' folder. Users may or may not have
            % this project, so we check for the folder.
            % Older versions of MATLAB don't yet know of the isfolder()
            % method, so we check for that. 
            if verLessThan('matlab', '9.4')
                if isdir([ strrep(pwd(), '\', '/') '/old' ]) %#ok<ISDIR>
                    addpath([ strrep(pwd(), '\', '/') '/old' ]);
                end
            else
                if isfolder([ strrep(pwd(), '\', '/') '/old' ])
                    addpath([ strrep(pwd(), '\', '/') '/old' ]);
                end
            end
        end
        
        
        
        function oSim = sim(sSimulation, varargin)
            %SIM A function that creates a simulation object
            
            % First we call the initialization method of this class.
            vhab.init();
            
            % Construct the simulation object using the string describing
            % the path to the simulation.infrastructure class file, e.g.
            % 'tutorials.simple_flow.setup'
            simConstructor = str2func(sSimulation);
            oSim           = simConstructor(varargin{:});
            
            % Now call .initialize() which wraps everything up. Very
            % important if e.g. several sim objects should be created
            % before running one of them (e.g. logging would get mixed up!)
            oSim.initialize();
        end
        
        
        function clear(bDontPreserveBreakpoints)
            %CLEAR Clears variables, classes and objects from previous runs
            
            % We need to clear thoroughly to ensure that everything is
            % actually recompiled, but that will unfortunately also clear
            % the breakpoints the user has set in the code. So we include
            % code below that preserves the breakpoints. In the unusual
            % case that the breakpoints *should* be cleared, the user can
            % pass in a boolean variable to this function.
            if nargin < 1 || ~islogical(bDontPreserveBreakpoints)
                bDontPreserveBreakpoints = false;
            end
            
            % If an old simulation obj exists in the base workspace, remove
            % that explicitly just to make sure ...
            try
                oSim = evalin('base', 'oLastSimObj');
                delete(oSim);
            catch
                % Ignore all errors that occur. 
            end
            
            % FLUSH serializers / loggers
            % Only required if we're already initialized
            if exist('base','file') > 0
                base.flush();
            end
            
            % Telling the user what's going on
            disp('Clearing MATLAB classes...');
            
            % For debugging purposes we want to know how long it took to
            % clear the classes. If it took *really* long, on the order of
            % several seconds, we know something is not working correctly.
            % So we start a timer here. 
            hTimer = tic();
            
            % Save all breakpoints so we can restore them after the clear
            % command.
            tBreakpoints = dbstatus('-completenames');
            
            % Clearing the workspace and old classes
            % This is done to ensure that all classes are correctly
            % recompiled. If this is not done, some existing classes might
            % be reused without taking into account changes made to them in
            % between simulation runs.
            % If there are still open windows, MATLAB will issue warnings
            % about the window classes, that they can't be deleted. These
            % warnings are supressed by turning off all warnings before
            % clearing. They are turned back on afterwards.
            warning('off','all');
            evalin('base','clear all');
            evalin('base','clear classes');
            warning('on','all');
            
            % Ouput to the console using the previously set timer. 
            disp(['Classes cleared in ', num2str(toc(hTimer)), ' seconds!'])
            
            % Restore breakpoints if there were any.
            if bDontPreserveBreakpoints && (numel(tBreakpoints) > 0)
                dbstop(tBreakpoints);
            end
        end
        
        function oSimRtn = exec(sSimulation, ptConfigParams, tSolverParams, varargin)
            %EXEC A wrapper for the other methods in this class, used to start a simulation
            
            % The .exec method is basically just a shorthand for calling
            % the clear(), sim() and run() methods of this class in that
            % order. 
        
            % Clear all existing classes, objects, variables, console etc.
            vhab.clear();
            
            % Setting the default values for the input parameters of the
            % simulation class, so constructor for the simulation does not
            % have to check if they are present.
            if nargin < 2 || isempty(ptConfigParams), ptConfigParams = containers.Map(); end
            if nargin < 3 || isempty(tSolverParams),  tSolverParams   = struct(); end
            
            % Actually creating the simulation object.
            oSim = vhab.sim(sSimulation, ptConfigParams, tSolverParams, varargin{:});
            
            % We assign the object in the base workspace so it is useable
            % and visible to the user even after the simulation has
            % finished or was aborted. 
            assignin('base', 'oLastSimObj', oSim);
            
            % Running the simulation
            oSim.run();
            
            % In some cases, e.g. running multiple simulations
            % simultaneously, the exec() method should return the
            % simulation object after the simulation is complete. This is
            % only done if the number of output arguments is one or
            % greater. 
            if nargout >= 1, oSimRtn = oSim; end
        end
        
    end
    
end

